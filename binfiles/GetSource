#!/usr/bin/env zsh

# Unpack a source tree, either from:
#   1. A local tarball cache
#   2. A remote tarball repository
#   3. A local SCM hierarchy
#   4. A remote SCM hierarchy (not yet implemented)

emulate -LR zsh

function extract_local_tarball {
  local archive_name archive_path

  archive_name=$1
  archive_path=$(find_local_tarball $archive_name)
 
  if (( $? == 0 )); then
    #print -u2 archive_path = \"$archive_path\"
    cd $SRCROOT
    if tar xfp $archive_path ; then
      destdir=$(tar tf $archive_path | sed 1q)
      print $PWD/${destdir%%/*}
    else
      print -u2 "$progname: tar error when extracting from $archive_path: $?"
      return 2
    fi
    return 0
  fi

  # No match found
  return 1
}

# Find a local tarball of the specified package
function find_local_tarball {
  typeset -a pkgs
  pkgbase=$1
  pkgs=( $ZIPROOT/$pkgbase*.(${(pj:|:)~suffix_list})(Nom) )
  if [[ -r $pkgs[1] ]]; then
    print $pkgs[1]
    return 0
  fi

  return 1
}

function usage {
  print -u2 "\
usage: $progname [-h|--help] --cache=<dir> --force --remote --scm=<dir> \
--src=<dir> --update --ver=<version_string> <project>
       -h|--help            Print this help message and exit
       --cache=<dir>        Specify the location of the local tarball cache
       --force              Force overwriting of local tarballs
       --since=<timespec>   At least one file must be newer than the
                            timespec [as understood by find(1)]
       --remote             Use wget to retrieve the file
       --scm=<dir>          Specify the location of software configuration
                            management directory
       --src=<dir>          Use the specifed directory as the root for the
                            destination source tree
       --update             Assume we are looking for source code from
                            scm and update prior to retrieving
       --ver=<string>       When retrieving sources from scm, use the
                            specified version string as a suffix.  If this
                            is not specified, the default version string
                            is \"-YYYY-MM-DD\"

       project              The name of the archive or URL, or the name of
                            the project under the scm directory."
  return 0
}

progname="${0:t}"

# Here is the list of suffixes that identify tarfiles
suffix_list=( tar tar.bz2 tar.gz tar.lzma tar.xz tgz )

zparseopts -D h=help -help=help -cache:=cache_root -force=force \
           -since:=timespec -remote=remote -scm:=scm_root     \
           -src:=src_root -update=update -ver:=version

[[ -n $help ]] && usage && exit 0

# ZIPROOT, SRCROOT, SCMROOT and VERSION are preserved for historical reasons.
: ${ZIPROOT:=.}
[[ -n $cache_root ]] && ZIPROOT=${cache_root[2]#=}
: ${SRCROOT:=.}
[[ -n $src_root ]] && SRCROOT=${src_root[2]#=}
: ${SCMROOT:=.}
[[ -n $scm_root ]] && SCMROOT=${scm_root[2]#=}
: ${VERSION:="$(date +'%Y-%m-%d')"}
[[ -n $version ]] && VERSION=${version[2]#=}

# Make sure VERSION starts with a '-'
[[ VERSION == -* ]] || VERSION="-${VERSION}"

# --update forces an SCM update and retrieves code from SCM.
if [[ -z $update ]]; then

  # Remote file name, so retrieve the file to $ZIPROOT and unpack it from there.
  if [[ -n $remote ]] || [[ $1 =~ ftp://*\|http://* ]]; then

    # Unless the --force option was specified, a local copy of the
    # tarball supercedes the need to fetch the remote tarball.
    archive_name=$(basename $1)
    if [[ -z $force ]] && extract_local_tarball ${archive_name%.(${(pj:|:)~suffix_list})} ; then
      exit 0
    fi
    (
      cd $ZIPROOT
      mv -f ${archive_name} ${archive_name}.old >& /dev/null
      if ! wget -q $1 ; then
        print -u2 "$progname: wget error when retrieving $1: $?."
        exit 1
      fi
    )

    if ! extract_local_tarball $(basename $1) ; then
      print -u2 "$progname: extracting files from the retrieved tarball failed."
      exit 1
    fi
    exit 0
  fi

  # Unpack a tarball from the local cache, if possible.
  extract_local_tarball $1 && exit 0

# Force an SCM update.
else
  if [[ ! -d $SCMROOT/$1 ]]; then
    print -u2 "$progname: --update specified, but $SCMROOT/$1 was not found."
    exit 1
  fi
  SCMROOT=$SCMROOT scm_update $1
  cd $SCMROOT/$1

  # The specified source tree must include (in priority order):
  #  1. One or more files whose modification time is newer than the --since parameter
  #  2. One or more files whose modification time is newer than $updatefile
  #  3. One or more files whose modification time is more recent than midnight.
  : ${updatefile:=last_update}
  ts=( "-newermt" $(today) )
  timestamp=${timespec[2]#=}
  if [[ -n $timestamp ]]; then
    ts=( "-newermt" $timestamp )
  elif [[ -e $updatefile ]]; then
    ts=( "-newermm" $updatefile )
  fi
  newfiles=( $(find . \( -path ./.bzr -o -path ./.git -o -path ./.hg \) -prune \
                     -o $ts -type f -print) )
  #print -u2 newfiles = $newfiles
  if (( $#newfiles < 1 )) && [[ -z $force ]]; then
    print -u2 "$progname: --update specified, but no newly-modified files were found in $SCMROOT/$1"
    exit 2
  fi
  touch $updatefile
  cd -
fi

# Try to extract the named project from SCM.
if [[ -d $SCMROOT/$1 ]]; then

  target_dir=$SRCROOT/${1}$VERSION
  mkdir -p $target_dir
  cd $target_dir
  if ! tar cf - -C $SCMROOT/$1 --exclude-vcs --dereference . | tar xfp - ; then
    print -u2 "$progname: tar error copying from $SCMROOT/$1 to $target_dir."
    exit 1
  fi
  print $target_dir
  exit 0
fi

# No luck.
print -u2 "$progname: No local file, remote file or SCM archive matched $1."
exit 3

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
