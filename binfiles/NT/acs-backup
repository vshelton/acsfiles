#!/usr/bin/env zsh

# Backup my user files on my laptop.

emulate zsh
progname=${0:t}

: ${rsync_cmd:=rsync}
: ${rsync_opts:="--backup --recursive --archive"}

typeset -A backup_list
backup_list=(
#   source          destination
    /e/acs/         /f/backups/acs
    /usr/local/     /f/backups/usr-local
)

function usage {
  print -u2 "\
usage: $progname -h
       Backup the files on my system.
       Paths to backup are (currently) hard-coded to /e/acs and /usr/local.
       Options:
       -d Delete old files from the backup directory.
       -h Print this help message.
       -v Display progress messages."
}

function do_backup {
  if [[ $# -ne 2 ]]; then
    print -u2 "$progname: $0: src dest\n"
    exit 1;
  fi

  generate_delete_list $1 $2
  sync_files $1 $2
}

function sync_files {
  if [[ $# -ne 2 ]]; then
    print -u2 "$progname: $0: src dest\n"
    exit 1;
  fi

  [[ -n $verbose ]] && print "Backing up $1 to $2."
  ${=rsync_cmd} ${=rsync_opts} $delete $1 $2
}

function generate_delete_list {
  if [[ $# -ne 2 ]]; then
    print -u2 "$progname: generate_delete_list: src dest\n"
    exit 1;
  fi

  [[ -n $verbose ]] && print "Generating delete list for $1 in $2/rsync-delete-list.txt."
  ${=rsync_cmd} --recursive --verbose --dry-run --delete $1 $2 >& $2/rsync-delete-list.txt
}

# Parse the options
zparseopts -D d=delete h=help v=verbose

if [[ -n $help ]]; then
  usage
  exit 0
fi

# Options (-d and -v) are passed as globals, not parameters
[[ -n $delete ]] && delete="--delete"

for k in ${(k)backup_list}; do
  do_backup $k $backup_list[$k]
done

# Local Variables:
# mode: ksh
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
