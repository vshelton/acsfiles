#!/usr/bin/env zsh

# Build XEmacs versions (21.4 and 21.5, both native and cygwin).
# The native versions are not installed, but the cygwin versions
# are installed to /usr/local/xemacs-21.x-$(today).
# All kits reference packages installed under the cygwin path /XEmacs.

emulate -LR zsh
progname=${0:t}

function usage {
  print -u2 "\
usage: $progname [-h|--help] [--intel] [--libs] <21.4|21.5*>
       -h|--help            print this help message and exit
       --intel              use the intel compiler
       --libs               build the support libs (probably doesn't work)
       21.4                 build a 21.4 XEmacs kit from SCM
       21.5*                build some type of 21.5 XEmacs kit from SCM"
}

function make_shortcut {
  local args desc target xemacs_ver xemacs_date xemacs_type

  if ! cd $1 ; then
    print -u2 "$progname: could not open directory $1 to create a shortcut."
    return 1
  fi

  xemacs_ver=$2                # version (21.4 or 21.5-test, etc)
  xemacs_date=$3               # version date yyyy-mm-dd
  xemacs_type=$4               # type: "native", "cygwin", etc

  # In case you're wondering: yes, the handling of the target filename is bogus.
  case $xemacs_type in
  (*native*)
    target="$OLDPWD/xemacs-$xemacs_ver-$xemacs_date/src/xemacs.exe"
    [[ ! -e $target ]] && target="$OLDPWD/xemacs-$xemacs_ver.$xemacs_date/src/xemacs.exe"
    if [[ ! -e $target ]]; then
      print -u2 "$progname: could not find XEmacs target for link."
      cd -
      return 1
    fi
    args=
    ;;
  (*cygwin*)
    target="/bin/run.exe"
    args="$(ls $USRLOCAL/xemacs-${xemacs_ver}-${xemacs_date}*/bin/xemacs-*.exe)" 2>/dev/null
    [[ ! -e $args ]] && args="$(ls $USRLOCAL/xemacs-${xemacs_ver}.${xemacs_date}*/bin/xemacs-*.exe)" 2>/dev/null
    if [[ ! -e $args ]]; then
      print -u2 "$progname: could not find XEmacs target for link."
      cd -
      return 1
    fi
    args="--arguments=$args"
    ;;
  esac

  desc="XEmacs $xemacs_ver $xemacs_date ($xemacs_type)"
  mkshortcut --desc="$desc" --icon=/bin/run.exe --iconoffset=1 --name="$desc" --workingdir=$HOME $args $target
  cd -
}

zparseopts -D h=help -help=help -intel=with_intel -libs=build_libs

if [[ -n $help ]]; then
  usage
  exit 0
fi

# Optional '--libs' argument means to build the libraries.
# This probably doesn't work.
[[ -n $build_libs ]] && mk-xemacs-support-libs

[[ -n $with_intel ]] && with_intel="--intel"

# The default is to build both 21.4 and 21.5 from source code control
(( $# == 0 )) && set 21.4 21.5

# The location for the installed XEmacs.
: ${XEMACS_INSTALLED_ROOT:=/XEmacs}

# The directory where shortcuts are created.
: ${shortcut_dir:="$XEMACS_INSTALLED_ROOT/shortcuts"}

for ver in $*; do

# Parse the version string.
# The legal version strings are:
#
#   xemacs-21.[45].??
#   xemacs-21.[45]*-yyyy-mm-dd || xemacs-21.[45]*-yyyy-mm-dd-hhmm
#        These version names assume that the named directory already
#        exists and is an XEmacs source directory.
#
#   xemacs-21.[45]*
#        These version names assume that there is an SCM hierarchy
#        of the given name that exists as a sub-directory of $SCMROOT.
#        The resulting source directory will be named, e.g.
#        xemacs-21.4-2009-09-30 or xemacs-21.5-test-2009-09-30.
#
#   As a backward-compatible shortcut, any of the above patterns
#   can be specified without the leading "xemacs-", i.e. "21.4".

  case $ver in

  (xemacs-21.[45].??)
    srcdir=$ver
    # If the source directory doesn't yet exist, unpack it here.
    if [[ ! -e $srcdir ]]; then
      if ! GetSource --src=. $srcdir >& /dev/null ; then
        print -u2 "$progname: could not retrieve sources for $ver."
        exit 2
      fi
    fi
    datespec=${ver#xemacs-}
    branch=${datespec%.??}
    datespec=${datespec#$branch.}
    ;;

  (21.[45].??)
    srcdir=xemacs-$ver
    # If the source directory doesn't yet exist, unpack it here.
    if [[ ! -e $srcdir ]]; then
      if ! GetSource --src=. $srcdir >& /dev/null ; then
        print -u2 "$progname: could not retrieve sources for $ver."
        exit 2
      fi
    fi
    branch=${ver%.??}
    datespec=${ver#$branch.}
    ;;

  (xemacs-21.[45]*????-??-??-????)
    srcdir=$ver
    datespec=${ver#xemacs-}
    branch=${datespec%-????-??-??-????}
    datespec=${datespec#$branch-}
    ;;

  (21.[45]*????-??-??-????)
    srcdir=xemacs-$ver
    branch=${ver%-????-??-??-????}
    datespec=${ver#$branch-}
    ;;

  (xemacs-21.[45]*????-??-??)
    srcdir=$ver
    datespec=${ver#xemacs-}
    branch=${datespec%-????-??-??}
    datespec=${datespec#$branch-}
    ;;

  (21.[45]*????-??-??)
    srcdir=xemacs-$ver
    branch=${ver%-????-??-??}
    datespec=${ver#$branch-}
    ;;

  # By default, the version is based on the date
  # and the sources are retrieved from SCM.
  (*)
    [[ $ver == 21* ]] && ver=xemacs-$ver
    if ! scm_update $ver ; then
      print -u2 "$progname: could not update $ver. \
Is there an SCM hierarchy at $SCMROOT?"
      exit 2
    fi

    # Make a local copy of the source tree
    if ! srcdir=$(GetSource --src=. $ver) ; then
       print -u2 "$progname: could not retrieve sources for $ver."
       exit 2
    fi
    srcdir=${srcdir#./}
    branch=${ver#xemacs-}
    datespec=${srcdir#xemacs-$branch-}
    ;;
  esac

  build_opts=
  install_default=
  case $ver in
  (*21.4*)
    build_opts="--without-debug"
    ;;
  (*21.5*)
    build_opts="--with-mule"
    install_default="t"
    ;;
  esac

  # Make but don't install a native version.
  # We'll run it from the source directory.
  print "Building XEmacs $ver native"
  if MakeNativeXEmacs $build_opts --package-root="$(cygpath -m $XEMACS_INSTALLED_ROOT)" $with_intel $srcdir ; then
    make_shortcut $shortcut_dir $branch $datespec "native"
  else
    print -u2 "$progname: MakeNativeXEmacs failed!"
  fi

  # Make and install a cygwin version and make it the default.
  print "Building XEmacs $ver cygwin"
  mkdir ../build >& /dev/null
  pushd ../build

  if MakeCygwinXEmacs $srcdir $install_default ; then
    make_shortcut $shortcut_dir $branch $datespec "cygwin"
  fi
  popd
done

# Local Variables:
# mode: ksh
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
