#!/usr/bin/env zsh

# Compare the two files, optionally making substitions to each file first.
# Usage: diffs [-h] [-s/regex1/regex2/[g]] file1 [-s/regex3/regex4/[g]] file2
#        -h - Print this help message
#        -s - Run perl substitition on file before comparing"

emulate -LR zsh
progname=${0:t}

usage()
{
  print -u2 "\
usage: $progname [-h] [-s/regex1/regex2/[g]] file1 [-s/regex3/regex4/[g]] file2
       -h - Print this help message
       -s - Run perl substitition on file before comparing"
}

# createFile destFile [-s/regex1/regex2/[g]] srcFile
# returns $srcFile $shiftCount
#
# Create a possibly modified file
createFile()
{
  local destFile=$1     # Hack: this variable is not included in shiftCount
  shift                 #       nor checked in the argument list

  local pat=
  srcFile=              # Return value with external scope
  shiftCount=1          # Return value with external scope
                        # Default value of 1 assumes srcFile is specified

  # Get optional substitution pattern
  if [[ $1 == -s* ]]; then
    pat=${1#-}
    shift
    (( ++shiftCount ))
  fi
  if (( $# < 1 )); then
    usage
    exit 1
  fi

  # Get the name of the source file
  srcFile=$1
  if [[ ! -e $srcFile ]]; then
    print -u2 "$progname: $srcFile does not exist".
    exit 2
  fi

  # Create (potentially modified) file
  if [[ -n $pat ]]; then
    perl -p -e $pat <$srcFile >$destFile
  else
    cp $srcFile $destFile
  fi
}

if [[ $1 == "-h" ]]; then
  usage
  exit 0
fi

# Erase temporary files on interruption or exit
diff1=$(mktemp)
diff2=$(mktemp)
trap 'trap -; rm -f $diff1 $diff2' EXIT INT

srcFile=
integer shiftCount=0

createFile $diff1 "$@"
file1=$srcFile
shift $shiftCount

createFile $diff2 "$@"
file2=$srcFile
shift $shiftCount

# Test whether or not both paths are absolute
if [[ ${file1[1]} != ${file2[1]} ]]; then
  label1=$file1
  label2=$file2
else
  # Split source paths into components
  split1=( ${(s:/:)file1} )
  split2=( ${(s:/:)file2} )

  # Remove common prefixes from file labels
  integer i=1
  while [[ i -le $#split2 && $split2[i] == $split1[i] ]]
  do
    (( ++i > $#split1 )) && break
  done

  label1=${(j:/:)split1[i,-1]}
  label2=${(j:/:)split2[i,-1]}
fi

diff --unified=0 --label $label1 $diff1 --label $label2 $diff2

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
