#!/usr/bin/env zsh
#
# Link a package installed into its own sub-tree (i.e. one built
# via "bld -s") into the standard install path.

emulate -LR zsh
setopt extendedglob
progname=${0:t}

# Make sure there is exactly one argument
if (( $# != 1 )); then
  print -u2 "
usage: $progname <pkg>
       pkg is a full package name, like \"gcc-2.95-2002-04-11\""
  exit 1
fi

pkgver=$1		# Long name, i.e. gcc-2.95-2002-04-11
pkg=${pkgver%%-*}	# Generic name, i.e. gcc
# Sigh, the Tcl/Tk rule
[[ $pkgver = $pkg ]] && pkg=${pkgver%%([0-9.])#}

: ${USRLOCAL:=/usr/local}
inst_prefix=$USRLOCAL
cd $inst_prefix

# Make sure the $pkgver directory exists
if [[ ! -d $pkgver ]]; then
  print -u2 "$progname: directory $inst_prefix/$pkgver does not exist"
  exit 1
fi

# If a link of the generic name already exists, replace it
if [[ -L $pkg ]]; then
  rm $pkg

# If a directory of the generic name already exists, rename it
elif [[ -d $pkg ]]; then
  mv $pkg $pkg-old-$(now)
fi

# Link the generic name to the specific name
ln -s $pkgver $pkg

# It's much simpler to use symlink-tree
for d in bin info man; do
  if [[ -d $pkg/$d ]]; then
    [[ -d $d ]] || mkdir $d
    pushd $d
    exclude=
    [[ $d = info ]] && exclude=dir
    symlink-tree ../$pkg/$d $exclude
    popd
  fi
done

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
