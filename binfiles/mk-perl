#!/usr/bin/env zsh

# This is a generic build script to download the latest source code and
# build a new version of a software package.  This script knows how to
# build conky, exa, feh and perl.  Link this to "mk-exa" or "mk-perl", etc.

: ${USRLOCAL:=/usr/local}

export PREFIX=$USRLOCAL

install=
snapshot=
zparseopts -E -D i=install -install=install s=snapshot -snapshot=snapshot

# Strip "mk-" from the command name in order to get the package name.
progname=${0:t}
pkgname=${progname:s/mk-/}
scm_opts=( --update $* )

# All packages potentially go through the same steps: update source control,
# copy from source control, configure, make, make test & make install.

# Set the package-specific commands.
case $pkgname in
(conky)
  CONFIGURE=( "cmake" "-DCMAKE_INSTALL_PREFIX=$USRLOCAL" "-DBUILD_XDBE=true" )
  BUILD=( "make" )
  TEST=
  INSTALL=( "make" "install" )
  ;;

(exa)
  export ZSHDIR=$USRLOCAL/share/zsh/site-functions
  CONFIGURE=
  BUILD=( "make" "-e" )
  TEST=
  INSTALL=( "make" "-e" "install" "install-zsh-completions" )
  ;;

(feh)
  export VERSION=$(today)
  CONFIGURE=
  BUILD=( "make" "-e" )
  TEST=
  INSTALL=( "make" "-e" "install" )
  ;;

(perl)
  [[ -n $snapshot ]] && PREFIX=$PREFIX/${pkgname}-$(today)
  CONFIGURE=( "./Configure"
              "-Dprefix=$PREFIX"
              "-Dusedevel"
              "-Dcf_email=ethersoft@gmail.com"
              "-des" )
  BUILD=( "make" )
  TEST=( "make" "test" )
  INSTALL=( "make" "install" )
  ;;

(*)
  print -u2 "$progname: unknown package: ${pkgname}.
This script knows how to build conky, exa, feh and perl."
  exit 1
  ;;
esac

# Nowadays it's hard to separate the source directory
# from the build directory, so we'll build in the source directory.
srcdir=$(GetSource $scm_opts $pkgname) || exit $?
cd $srcdir

if [[ -n $CONFIGURE ]]; then
  out=conf.out
  print -n "Configuring $pkgname ... "
  ( $CONFIGURE ) >& $out
  retval=$?
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: configuration failed:"
    tail -n 15 $out
  fi
fi

if (( retval == 0 )) && [[ -n $BUILD ]]; then
  out=mk.out
  print -n "Building $pkgname ... "
  ( $BUILD ) >& $out
  retval=$?
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: building failed:"
    tail -n 15 $out
  fi
fi

if  (( retval == 0 )) && [[ -n $TEST ]]; then
  out=check.out
  print -n "Testing $pkgname ... "
  ( $TEST ) >& $out
  retval=$?
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: testing failed:"
    tail -n 15 $out
  fi
fi

if (( retval == 0 )) && [[ -n $INSTALL ]] && [[ -n $install ]]; then
  out=inst.out
  print -n "Installing $pkgname ... "
  ( $INSTALL ) >& $out
  retval=$?
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: installation failed:"
    tail -n 15 $out
  fi
fi

exit $retval

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
