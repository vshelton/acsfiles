#!/usr/bin/env zsh

# This is a generic build script to download the latest source code and
# build a new version of a software package.  This script knows how to
# build various packages; see the definition of all_packages below.

emulate -LR zsh

# Install alacritty.
function
alacrittyInstall()
{
  case $(uname -a) in
  (*deb*)
    # Installs in /usr/local/bin/alacritty
    cargo deb --install
    mv /usr/local/bin/alacritty $USRLOCAL/bin
    ;;
  (*arch*)
    cp target/release/alacritty $USRLOCAL/bin
    sudo desktop-file-install alacritty.desktop
    sudo update-desktop-database
    ;;
  esac
}

# The emacs pre-configure command is autogen.sh.
function
emacsPreConfigure()
{
  (
    cd $1
    (
      ./autogen.sh
      ./autogen.sh autoconf
    ) >& autogen.out

    cd lisp
    ln -s $SCMROOT/rust-mode/rust-mode.el
  )
}

# The i3 pre-configure command is autoreconf.
function
i3PreConfigure()
{
  (
    cd $1
    autoreconf -fi
  )
}

# The zsh pre-configure command is built in to the zsh sources.
function
zshPreConfigure()
{
  (
    cd $1
    ./Util/preconfig
  )
}

# Make a suitable build directory under $BLDROOT and cd to it.
function
CreateBuildDirectory()
{
  ver=${1#$SRCROOT/}
  mkdir $BLDROOT/$ver
  cd $BLDROOT/$ver
}

function Help() {
  print -n -u2 "usage:
$progname <package> "
  for f in ${(ki)abbrevs}; do
    print -n -u2 "[-$f|-${abbrevs[$f]}] "
  done
  print -u2
  for f in ${(ki)abbrevs}; do
    print -u2 "    -${f}${desc[$f]}"
  done
  print -u2 "    <package> is one of: $(PrintList ${(ki)all_packages})."
}

# Update the symbolic link pointing to the most recent copy
# of the specified package.
function
LinkLatest()
{
  cd $USRLOCAL
  package=$1
  rm $package || return $?
  ln -s ${package}*(oc[1]) $package
}

# Print a list of things to stdout.
function PrintList() {
  while (( $# > 0 ))
  do
    print -n "$1"
    shift
    if [[ $# -gt 1 ]]; then
      print -n ", "
    elif [[ $# -eq 1 ]]; then
      print -n " and "
    fi
  done
}

: ${USRLOCAL:=/usr/local}
: ${BLDROOT:=$USRLOCAL/build}
: ${SRCROOT:=$USRLOCAL/src}

export PREFIX=$USRLOCAL

# Get the program name from arg0.
progname=${0:t}

# Add a new package here.
typeset -AA all_packages=(
  alacritty 1
  conky     1
  emacs     1
  exa       1
  feh       1
  i3        1
  perl      1
  tigervnc  1
  tilda     1
  zsh       1
)

# Add each new option here.
typeset -AA abbrevs desc val
force_opt=
abbrevs[-force]=f
   desc[-force]="     Build the package even if nothing has changed"
    val[-force]=force_opt

help_opt=
abbrevs[-help]=h
   desc[-help]="      Print this help message and exit"
    val[-help]=help_opt

install_opt=
abbrevs[-install]=i
   desc[-install]="   Install the package after building it"
    val[-install]=install_opt

snapshot_opt=
abbrevs[-snapshot]=s
   desc[-snapshot]="  Build the package for a snapshot prefix (i.e. \"$USRLOCAL/<package>-$(today)\")"
    val[-snapshot]=snapshot_opt

tar_opt=
abbrevs[-tar]=t
   desc[-tar]="       Build the package from a tarball, ignoring SCM"
    val[-tar]=tar_opt

# Parse the options.
for f in ${(k)abbrevs}; do
  zparseopts -E -D $f=${val[$f]} ${abbrevs[$f]}=${val[$f]}
done

# print "force_opt=\"$force_opt\""
# print "help_opt=\"$help_opt\""
# print "install_opt=\"$install_opt\""
# print "snapshot_opt=\"$snapshot_opt\""
# print "tar_opt=\"$tar_opt\""

if [[ -n $help_opt ]]; then
  Help
  exit 0
fi

# The old style was to determine the package to build
# based on the command name, like "mk-perl".
# The new style is to pass the package name as the first parameter.
pkgname=${progname:s/mk-/}
if [[ $progname == mk-software ]]; then
  pkgname=$1
  shift
fi

# All packages potentially go through the same steps:
#  - Update source control
#  - Copy from source control
#  - configure
#  - make
#  - make test
#  - make install

if [[ -z ${all_packages[$pkgname]} ]]; then
  print -u2 "\
$progname: unknown package \"$pkgname\".
This script knows how to build \
$(PrintList ${(ki)all_packages})."
  exit 1
fi

# --tar option means use a tarball, not SCM.
scm_opts=()
[[ -n $tar_opt ]] || scm_opts+="--update"
[[ -n $force_opt ]] && scm_opts+="--force"

# Update the sources and copy them into a source directory.
srcdir=$(GetSource $scm_opts $pkgname) || exit $?

# alacritty, exa and feh real configuration mechanisms,
# so they must build in the source directory.
case $pkgname in
(alacritty)
  ;&  # Fall through
(exa)
  ;&  # Fall through
(feh)
  cd $srcdir
  ;;

# Other packages support building in a separate directory
# and their package-specific recipes reflect that.
(*)
  CreateBuildDirectory $srcdir
  srcdir=$(relative $srcdir)
  ;;
esac

# Implement the --snapshot option.
[[ -n $snapshot_opt ]] && PREFIX=$PREFIX/${pkgname}-$(today)

# Set the package-specific commands.
BUILD=( make )
CONFIGURE=()
INSTALL=( make install )
POSTINSTALL=()
[[ -n $snapshot_opt ]] && POSTINSTALL=( LinkLatest $pkgname )
PRECONFIGURE=()
TEST=()

case $pkgname in
(alacritty)
  BUILD=( make binary )
  INSTALL=( alacrittyInstall )
  ;;

(conky)
  CONFIGURE=( cmake
              -DCMAKE_INSTALL_PREFIX=$PREFIX
              -DBUILD_XDBE=true
              $srcdir )
  ;;

(emacs)
  PRECONFIGURE=( emacsPreConfigure $srcdir )
  CONFIGURE=( $srcdir/configure
              --prefix=$PREFIX
              --without-selinux
              --without-compress-install
              $* )
  BUILD=( make CFLAGS=-O3 bootstrap )
  ;;

(exa)
  export ZSHDIR=$USRLOCAL/zsh/share/zsh/site-functions
  BUILD=( make -e )
  INSTALL=( make -e install install-zsh-completions )
  ;;

(feh)
  export VERSION=$(today)
  BUILD=( make -e )
  INSTALL=( make -e install )
  ;;

(i3)
  PRECONFIGURE=( i3PreConfigure $srcdir )
  CONFIGURE=( $srcdir/configure
              --prefix=$PREFIX )
  ;;

(perl)
  CONFIGURE=( $srcdir/Configure
              -Dprefix=$PREFIX
              -Dusedevel
              -Dcf_email=ethersoft@gmail.com
              -Dmksymlinks
              -des )
  TEST=( make test )
  ;;

(tigervnc)
  CONFIGURE=( cmake
              -DCMAKE_INSTALL_PREFIX=$PREFIX
              $srcdir )
  ;;

(tilda)
  CONFIGURE=( $srcdir/autogen.sh --prefix=$PREFIX --enable-clang )
  ;;

(zsh)
  PRECONFIGURE=( zshPreConfigure $srcdir )
  CONFIGURE=( $srcdir/configure
              --prefix=$PREFIX
              --enable-pcre )
  TEST=( make -k check )
  INSTALL=( make install install.info )
  ;;
esac

# Number of lines to tail on an error.
: ${ERROR_LINES:=15}

if [[ -n $CONFIGURE ]]; then
  out=conf.out
  print -n "Configuring $pkgname ... "
  [[ -n $PRECONFIGURE ]] && ( $PRECONFIGURE ) >& /dev/null
  ( $CONFIGURE ) >& $out
  retval=$?
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: configuration failed:"
    tail -n $ERROR_LINES $out >&2
  fi
fi

if (( retval == 0 )) && [[ -n $BUILD ]]; then
  out=mk.out
  print -n "Building $pkgname ... "
  ( $BUILD ) >& $out
  retval=$?
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: building failed:"
    tail -n $ERROR_LINES $out >&2
  fi
fi

if  (( retval == 0 )) && [[ -n $TEST ]]; then
  out=check.out
  print -n "Testing $pkgname ... "
  ( $TEST ) >& $out
  retval=$?
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: testing failed:"
    tail -n $ERROR_LINES $out >&2
  fi
fi

if (( retval == 0 )) && [[ -n $INSTALL ]] && [[ -n $install_opt ]]; then
  out=inst.out
  print -n "Installing $pkgname ... "
  ( $INSTALL ) >& $out
  retval=$?
  ( $POSTINSTALL ) >>& $out
  print "done."
  if (( retval != 0 )); then
    print -u2 "$progname: installation failed:"
    tail -n $ERROR_LINES $out >&2
  fi
fi

exit $retval

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
