#!/usr/bin/env zsh

# Make XEmacs, either from source control or from a tarball.
# Usage: mk-xemacs [-[cdehmnou]] version [cfg_opts],
# where version is either '21.1', '21.4' or '21.5' to extract source
# code from source control and anything else is assumed to be an
# already-unpacked source distribution.
# Options:
#   -c - build XEmacs and run \'make check\', but do not install
#   -d - build and install a debug version without mule
#   -e - build and install a debug version with mule
#   -h - print this help message
#   -m - build and install a mule version
#   -n - build and install a normal (non-optimized, non-debug) version
#   -o - build and install an optimized version without mule
#   -u - build and install an optimized version with mule
# cfg_opts refers to XEmacs-specific configuration options, like
# --with-sound=native or --with-dialogs=motif

emulate -LR zsh
setopt extendedglob

progname=${0:t}

function usage() {
  print -u2 "\
usage: $progname [-cdhmno] xemacs-version [configure_options]
         -c - build XEmacs and run \'make check\', but do not install
         -d - build and install a debug version without mule
         -e - build and install a debug version with mule
         -h - print this help message
         -m - build and install a mule version
         -n - build and install a normal (non-optimized, non-debug) version
         -o - build and install an optimized version without mule
         -u - build and install an optimized version with mule
         [configure_options] are options to pass to the XEmacs configure
                             command, e.g. \'--with-dialogs=motif\'"
}

# Generate compiler flags
# $1 - Debug [0 or 1]
function generate_compiler_flags {

  # CFLAGS has the highest priority,
  # except -g will ALWAYS be specified for debugging
  OPTIMIZE_FLAGS=( ${=CFLAGS} )

  DEBUG_FLAGS=()
  if [[ -n $1 && $1 != 0 ]] then
    DEBUG_FLAGS=( -g )
    [[ -z $OPTIMIZE_FLAGS ]] && OPTIMIZE_FLAGS=( -O )
    return 0
  fi

  if [[ -z $OPTIMIZE_FLAGS ]]; then

    # Set compiler optimization flags based on OS version and compiler type
    case $(uname -a) in
    (*x86_64*)
      OPTIMIZE_FLAGS=( -Os -m64 -msse4.2 -ffast-math -fno-exceptions )
      ;;
    (*i?86*)
      case $CC in
      (*gcc*)
        OPTIMIZE_FLAGS=( -Os -malign-double -pipe -ffast-math -fno-exceptions )
        ;;
      # Intel C Compiler?
      (*)
        # -Os    enable speed optimizations, but disable some optimizations which
        #        increase code size for small speed benefit
        # -march=<cpu>  generate code excusively for a given <cpu>
        # Enable and specify the scope of Interprocedural (IP) Optimizations:
        # -ip     enable single-file IP optimizations (within files)
        OPTIMIZE_FLAGS=( -Os -ip )
        ;;
      esac
      ;;
    esac
  fi
}

# Configure and build XEmacs
# $1 = Name of target directory
# $2 = Optimize [0 or 1]
# $3 = Debug [0 or 1]
# $4 = Mule [0 or 1]
function cfg_and_build {
  build_target=$1
  build_options=()
  typeset -i build_debug
  typeset -i build_mule
  typeset -i build_optimized

  build_optimized=1
  [[ -z $2 || $2 == 0 ]] && build_optimized=0

  build_debug=1
  [[ -z $3 || $3 == 0 ]] && build_debug=0

  build_mule=1
  [[ -z $4 || $4 == 0 ]] && build_mule=0

  # Notice that build_debug overrides build_optimized
  (( $build_optimized != 0 )) && build_options=( $cfg_debug_off )
  (( $build_debug != 0 )) && build_options=( $cfg_debug_on )
  (( $build_mule != 0 )) && build_options[$#build_options+1]=( $cfg_mule_on )

  generate_compiler_flags $build_debug

  if ! cfg -s -o conf.out $(relative $SRCROOT/$build_target) $with_gcc \
           $with_cflags="$DEBUG_FLAGS $OPTIMIZE_FLAGS" $with_site_prefixes \
           $with_infopath $enable_dialogs $enable_widgets $enable_sound \
           $with_package_path $enable_pdump $enable_bignum \
           $with_default_eol_detection $build_options $generic_cfg_opts; then
    print -u2 "\n$progname: could not configure $build_target.\n"
    return 1
  fi

  build_dir=$build_target
  if ! cd $build_dir; then
    print -u2 "\n$progname: couldn't cd to $build_dir.\n"
    return 1
  fi

  print -n "Building XEmacs..."
  if ! make >& mk.out; then
    print -u2 "\n$progname: make failed.  See $build_dir/mk.out:"
    _POSIX2_VERSION=199209 tail mk.out >&2
    print -u2 "\n"
    cd -
    return 1
  fi

  print -n "done.\nRunning tests..."
  make -k check >& check.out
  print "done."

  if [[ -n $checkonly ]]; then
    cd -
    return 0
  fi

  print "Installing package to $prefix/$build_target."
  if ! make TAGS install >& inst.out; then
    print -u2 "\n$progname: make install failed.  See $build_dir/inst.out:"
    _POSIX2_VERSION=199209 tail inst.out >&2
    print -u2 "\n"
    cd -
    return 1
  fi

  # If the target is being built from a daily snapshot (includes the
  # string '-YYYY-MM-DD' or '-YYYY-MM-DD-HHMM'), create an executable
  # script with the version information stripped from it:
  # build_target=xemacs-21.2-2000-01-01 -> $prefix/bin/xemacs-21.2
  stripped_target=
  for pat in "-20??-??-??" "-20??-??-??-[0-9][0-9][0-9][0-9]" ;
  do
    if [[ $build_target == xemacs-*${~pat} ]]; then
      stripped_target=${build_target%${~pat}}
      break
    fi
  done
  if [[ -n $stripped_target ]]; then
    print exec "'$build_target'" '"$@"' > $prefix/bin/$stripped_target
    chmod 775 $prefix/bin/$stripped_target
  fi
  rm $prefix/bin/$build_target >& /dev/null
  ln -s xemacs-version $prefix/bin/$build_target
  cd - > /dev/null
}

#
# Start of main script
#
#set -x

zparseopts -D c=checkonly d=debug_no_mule e=mule_debug h=help m=mule n=normal \
           o=optim_no_mule u=mule_optim

[[ -n $help || $# == 0 ]] && usage
[[ -n $help ]] && exit 0
(( #argv == 0 )) && exit 1

# At this point, the version of XEmacs is the first argument.
# This can either be a version number, like '21.5', in which case
# the version is fetched from source control, or a directory name,
# which must be a directory under $SRCROOT.

# Trim trailing slashes in case the argument is a directory name.
argv[1]=${1%%/##}

# Set up version-specific options.
# If the version is to be extracted from source control,
# make a copy of the sources now.
case $1 in
(*19.16*|*20.*)
  PROJECT=$1
  TARGET=$PROJECT
  ;;

# Source-controlled versions of 21.x
(21.*)  # Spell out PROJECT and VERSION to allow flexibility in over-riding.
  PROJECT=${PROJECT:-xemacs-$1}
  VERSION=${VERSION:-$(today)}
  TARGET=${TARGET:-$PROJECT-$VERSION}
  mk-src $PROJECT >/dev/null
  ;;

# Non-source-controlled versions of 21.x.
(*21*)
  TARGET=$1
  PROJECT=${1%-????-??-??}
  ;;

(*)
  print -u2 "$progname: unknown or unsupported revision."
  exit 1
  ;;
esac
shift

# The default is a non-debug, non-optimized build.
[[ -z $optim_no_mule && -z $debug_no_mule && -z $mule ]] && normal=1

prefix=${USRLOCAL:-/usr/local}          # Architecture-dependent stuff
shared_root=${USRLOCAL:-/usr/local}     # Architecture-independent stuff

# Default to gcc if no compiler specified
export CC=${CC:-gcc}

# Here are the options that are normally specified by this script.
# The default options are now set up for XEmacs 21.5 with autoconf 2.5
enable_bignum="--enable-bignum=gmp"
enable_dialogs="--disable-dialogs"
enable_pdump="--disable-pdump"
enable_sound="--disable-sound"
enable_widgets="--disable-widgets"
with_cflags="--with-cflags"
with_default_eol_detection="--with-default-eol-detection"
with_infopath="--with-infopath=$USRLOCAL/info"
with_package_path="--with-package-path=$shared_root/site-packages::$shared_root/xemacs-packages"
with_site_prefixes=( --with-site-prefixes=$USRLOCAL )

# Need a way to enable/disable mule for different builds
cfg_mule_off=( --disable-mule )
cfg_mule_on=( --enable-mule --without-xim )

# Need a way to turn optimization and debugging on or off for different builds.
cfg_debug_off=( --with-optimization
                --disable-debug
                --disable-assertions
                --disable-error-checking
                --with-cflags-warning=
                --with-cflags-optimization=
                --with-cflags-debugging= )
cfg_debug_on=( --enable-debug
               --enable-assertions
               --enable-memory-usage-stats
               --with-cflags-optimization=
               --with-cflags-debugging= )

# Verify that the source directory exists and that there's an
# executable configure script there.
if [[ ! -d $SRCROOT/$TARGET ]]; then
  print -u2 "$progname: source directory $SRCROOT/$TARGET does not exist."
  exit 1
fi
if [[ ! -x $SRCROOT/$TARGET/configure ]]; then
  print -u2 "$progname: there is no executable configure script in source \
directory $SRCROOT/$TARGET."
  exit 1
fi

# Starting around 2005-03-12, XEmacs 21.5 converted to autoconf 2.59
# and many configure options changed.
# Test the version here.
autoconf2_5=
# Old versions of configure left temp files, so change to the /tmp directory.
(
  cd /tmp
  $SRCROOT/$TARGET/configure --help | grep -c -- --with-site-prefixes
) > /dev/null && autoconf2_5=1

# If we're not configuring against autoconf 2.5x, fiddle
# with the configure options.
if [[ -z $autoconf2_5 ]]; then
  enable_bignum="--use-number-lib=gmp"
  enable_dialogs="--with-dialogs=no"
  enable_pdump="--pdump=no"
  enable_sound="--with-sound=none"
  enable_widgets="--with-widgets=no"
  with_cflags="--cflags"
  with_default_eol_detection="--with-file-coding=yes"
  with_infopath="--infopath=$USRLOCAL/info"
  with_package_path="--package-path=$shared_root/site-packages::$shared_root/xemacs-packages"
  with_site_prefixes=( --site-includes=$prefix/include --site-libraries=$prefix/lib )

  # Here's how to turn mule on or off at build time.
  cfg_mule_off=( --with-mule=no )
  cfg_mule_on=( --with-mule  --without-xim )

  # Here's how to turn debugging on or off at build time.
  cfg_debug_off=( --debug=no --error-checking=none )
  cfg_debug_on=( --debug --error-checking=all )

  case $TARGET in
  (xemacs-19*)
    with_infopath=
    cfg_mule_off=()
    ;&          # Fall through
  (xemacs-20*)
    with_package_path=
    cfg_mule_on=( --with-mule )
    ;&          # Fall through
  (xemacs-21.1*)
    enable_pdump=
    enable_dialogs=
    enable_widgets=
    ;&          # Fall through
  (xemacs-21.4*)
    enable_bignum=
    ;;
  esac
fi

# This is the catchall for all configuration options that follow
# the version name and are not directly understood by this script.
generic_cfg_opts=()

# Any remaining arguments are options to be passed to the
# XEmacs configure command.

# Insert the value of the envariable XEMACS_CONFIGURE_OPTIONS
# at the beginning of the remaining argument list.  This
# will enable us to parse these options and over-ride them
# with arguments that were explicitly passed to the script.
if [[ -n $XEMACS_CONFIGURE_OPTIONS ]]; then
  2=($*)
  1=(${=XEMACS_CONFIGURE_OPTIONS})
fi

while [[ $# -gt 0 ]]
do
  case $1 in
  (--compiler=*)
    CC=${1:s/--compiler=//}
    ;;
  (--with-compiler=*)
    CC=${1:s/--with-compiler=//}
    ;;
  (--cflags=*)
    CFLAGS=$1:s/--cflags=//}
    ;;
  (--with-cflags=*)
    CFLAGS=$1:s/--with-cflags=//}
    ;;
  (--*pdump*)
    # Old style options
    if [[ -z $autoconf2_5 ]]; then
      if [[ $1 == *=no || $1 == --without* || $1 == --disable* ]]; then
        enable_pdump="--pdump=no"
      else
        enable_pdump="--pdump"
      fi
    # New options
    else
      if [[ $1 == *=no || $1 == --without* || $1 == --disable* ]]; then
        enable_pdump="--disable-pdump"
      else
        enable_pdump="--enable-pdump"
      fi
    fi
    ;;
  (--*bignum*)
    enable_bignum=$1
    ;;
  (--*sound*)
    enable_sound=$1
    ;;
  (--*site-prefix*)
    with_site_prefixes=( $1 )
    ;;
  (--*infopath*)
    with_infopath=$1
    ;;
  (--*package-path*)
    with_package_path=$1
    ;;
  (--*dialogs*)
    enable_dialogs=$1
    ;;
  (--*widgets*)
    enable_widgets=$1
    ;;
  (*eol-detection*)
    with_default_eol_detection=$1
  ;;
  (*file-coding*)
    with_default_eol_detection=$1
  ;;
  (--*)
    generic_cfg_opts[$#generic_cfg_opts+1]=$1
    ;;
  esac
  shift
done

# Configure a build tree in a new sub-directory of the current directory
SRCROOT=${SRCROOT:-$shared_root/src}

[[ -n $normal ]] && cfg_and_build $TARGET 0 0 0
[[ -n $optim_no_mule ]] && cfg_and_build $TARGET 1 0 0

if [[ -n $mule || -n $mule_debug || -n $mule_optim ]]; then

  # Mule support didn't exist until version 20
  if [[ $TARGET == xemacs-19* ]]; then
    print -u2 "XEmacs 19 does not support MULE"

  else

    # Make a symlink to the source directory
    (
      cd $SRCROOT
      if [[ -e $TARGET-mule ]]; then
        print -u2 "\n$progname: $SRCROOT/$TARGET-mule already exists, skipping mule build.\n"
      else
        ln -s $TARGET $TARGET-mule
      fi
    )

    mopt=0
    [[ -n $mule_optim ]] && mopt=1
    mdeb=0
    [[ -n $mule_debug ]] && mdeb=1
    cfg_and_build $TARGET-mule $mopt $mdeb 1
  fi
fi

if [[ -n $debug_no_mule ]]; then

   # Make a symlink to the source directory
   (
      cd $SRCROOT
      if [[ -e $TARGET-debug ]]; then
        print -u2 "\n$progname: $SRCROOT/$TARGET-debug already exists, skipping debug build.\n"
      else
        ln -s $TARGET $TARGET-debug
      fi
    )

  cfg_and_build "$TARGET-debug" 0 1 0
fi

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
