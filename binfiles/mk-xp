#!/usr/bin/env zsh

# Make XEmacs packages from CVS sources

emulate -LR zsh
setopt extendedglob nonomatch
progname=${0:t}

function usage() {
  print -u2 "\
usage: $progname [-hsv]
       Options:
       -h - print this help message.
       -s - build and install vc-mode which supports svn.
       -v - print verbose progress messages."
}

zparseopts -D h=help s=svn v=verbose
if [[ -n $help ]]; then
  usage
  exit 1
fi

# Copy the packages tree to a build directory based on today's date
: ${VERSION:=$(today)}
: ${SRCROOT:=$PWD}
if ! mk-src xemacs-packages $VERSION ; then
  print -u2 "$progname: mk-src error."
  exit 1
fi

if ! cd $SRCROOT/xemacs-packages-$VERSION ; then
  print -u2 "$progname: could not change to $SRCROOT/xemacs-packages-$VERSION directory."
  exit 1
fi

# If we don't have tex, then we can't build auctex.
# If we don't build auctex, then we can't build x-symbol.
if [[ ! -e =tex ]]; then
  perl -pi.orig -e "
    s@auctex@@;
    s@x-symbol@@;
  " xemacs-packages/Makefile
  #rm -rf xemacs-packages/auctex xemacs-packages/x-symbol
fi

: ${STAGING:="$HOME/tmp/staging"}

# Figure out what packages were previously installed
pkgs=${pkgs:-$(installed_packages)}

# Build experimental VC package that supports subversion
if [[ -n $svn ]]; then
  [[ -n $verbose ]] && print "$progname: including subversion-aware version of vc package."
  # Make sure only one vc package is included in the package list
  pkgs=${${pkgs#vc }% vc}
  case $pkgs in
  (^* vc *)
    pkgs="$pkgs vc"
  ;;
  esac
  mv xemacs-packages/vc xemacs-packages/vc-dist
  mv unsupported/scop/vc xemacs-packages
  perl -pi.orig -e "
    s@../../../XEmacs.rules@../../XEmacs.rules@;
  " xemacs-packages/vc/Makefile
fi

# Make a local rules file
perl -p -e "
    s@^XEMACS_21_5[\s]*=.*@XEMACS_21_5 =@;
    s@^BUILD_WITHOUT_MULE[\s]*=.*@BUILD_WITHOUT_MULE = t@;
    s@^NONMULE_INSTALLED_PACKAGES_ROOT[\s]*=.*@NONMULE_INSTALLED_PACKAGES_ROOT = $STAGING@;
" < Local.rules.template > Local.rules

[[ -n $verbose ]] && print "$progname: building all packages."
if ! make >& mk.out ; then
  print -u2 "$progname: make failed.  See $SRCROOT/xemacs-packages-$VERSION/mk.out."
  exit 2
fi

rm -rf $STAGING
[[ -n $verbose ]] && print "$progname: building bindist target."
if ! make bindist >>& mk.out ; then
  print -u2 "$progname: make bindist failed.  See $SRCROOT/xemacs-packages-$VERSION/mk.out."
  exit 3
fi

[[ -n $verbose ]] && print "$progname: copying XEmacs packages to $STAGING."

# Copy packages to $USRLOCAL/xemacs-packages-$(today)
mkdir $USRLOCAL/xemacs-packages-$VERSION
cd $STAGING
[[ -n $verbose ]] && print "$progname: installing $pkgs to $USRLOCAL/xemacs-packages-$VERSION."
for p in ${=pkgs}; do
  tar xfz $p-[0-9]* -C $USRLOCAL/xemacs-packages-$VERSION
done

cd $USRLOCAL/xemacs-packages-$VERSION/lisp
rm */*.el~*/_pkg.el

# Local Variables:
# mode: ksh
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
