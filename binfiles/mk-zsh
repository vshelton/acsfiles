#!/usr/bin/env zsh

# Make zsh from the latest CVS sources
# Usage: mk-zsh [zsh-version] [configure opts]

emulate -LR zsh
progname=${0:t}

# User-visible and user-overridable variables are all caps
: ${USRLOCAL:=/usr/local} ${SRCROOT:=$USRLOCAL/src}
: ${VERSION:=$(today)} ${PROJECT:=zsh} ${TARGET:=$PROJECT-$VERSION}

# We need to remember how SRCDIR got set
src_override=1          # Assume SRCDIR was set before script started
if [[ -z $SRCDIR ]]; then
  src_override=0
  : ${SRCDIR:=$SRCROOT/$TARGET}
fi

inst_prefix=$USRLOCAL

# If either there are no more remaining arguments,
# or if the next argument is a configuration option,
# copy a source snapshot from CVS to the source tree
if [[ $# = 0 ]] || [[ "$1" == -* ]]; then
  mk-src $PROJECT

  # Generate a configure script
  pushd $SRCDIR || exit 1
  # On cygwin, move the process substitution test aside
  [[ $(uname) =~ CYGWIN* ]] && mv Test/D03procsubst{.ztst,}
  ./Util/preconfig
  err=$?
  if (( err != 0 )); then
    print -u2 "$progname: preconfig failure on $PROJECT."
    exit $err
  fi
  popd

# Otherwise, $1 is the name of the already-unpacked source directory
else
  TARGET=$1
  (( src_override == 0 )) && SRCDIR=$SRCROOT/$TARGET
  shift
fi

generic_cfg_opts=()
with_tcsetpgrp="--with-tcsetpgrp"
# Enable zsh memory debugging everywhere except cygwin
enable_zsh_mem="--enable-zsh-mem"
[[ $(uname -s) == CYGWIN* ]] && enable_zsh_mem=

# Support options to configure
while [[ $# -gt 0 ]]
do
  case $1 in
  (--with-tcsetpgrp*)
    with_tcsetpgrp=$1
    ;;
  (--*able-zsh-mem*)
    enable_zsh_mem=$1
    ;;
  (--*)
    generic_cfg_opts=($generic_cfg_opts $1)
    ;;
  esac
  shift
done

# Configure zsh
cfg -s -o conf.out $SRCDIR --datadir=$USRLOCAL/share --enable-etcdir=$USRLOCAL/etc $with_tcsetpgrp $enable_zsh_mem ${=generic_cfg_opts}
err=$?
if (( err != 0 )); then
  print -u2 "$progname: could not configure $PROJECT."
  exit $err
fi

build_dir=$TARGET
cd $build_dir
err=$?
if (( err != 0 )); then
  print -u2 "$progname: couldn't cd to $build_dir."
  exit $err
fi

print -n "Building zsh..."
make >& mk.out
err=$?
if (( err != 0 )); then
  print -u2 "$progname: make failed.  See $build_dir/mk.out."
  exit $err
fi
print "done."

# Run tests
print -n "Running tests..."
make -k check >& check.out
#err=$?
#if (( err != 0 )); then
#  print -u2 "$progname: make check failed.  See $build_dir/check.out."
#  exit $err
#fi
print "done."
summarize_zsh_tests check.out
print "Installing package to $inst_prefix/$TARGET."
make install install.info >& inst.out
err=$?
if (( err != 0 )); then
  print -u2 "$progname: make install failed.  See $build_dir/inst.out."
  exit $err
fi

# Local Variables:
# mode: ksh
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
