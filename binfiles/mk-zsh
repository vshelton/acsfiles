#!/usr/bin/env zsh

# Make zsh either from CVS or from an unpacked tarball.
# Usage: mk-zsh [zsh-version] [configure opts]

emulate -LR zsh

function usage() {
  print -u2 "\
usage: $progname [-h|--help] [zsh_version] [configure_args]
       -h|--help - Print this help message"
  return 0
}

progname=${0:t}
: ${USRLOCAL:=/usr/local}

zparseopts -D h=help -help=help
[[ -n $help ]] && usage && exit 0

# Extract the program name from the command line.
project=zsh
(( $# > 0 )) && project=$1 && shift
srcdir=$( CopySourceVersion $project )

cd $srcdir
if [[ ! -e configure ]]; then

  # Generate a configure script.
  if ! ./Util/preconfig; then
    print -u2 "$progname: preconfig failure."
    exit 2
  fi
fi

: ${zsh_version:=$PWD:t}
mkdir $BLDROOT/$zsh_version
cd $BLDROOT/$zsh_version

# Configure.
configure_options=(
  --prefix=$USRLOCAL/$zsh_version
  --datadir=$USRLOCAL/share
  --enable-etcdir=$USRLOCAL/etc
  --enable-zsh-mem
  --enable-pcre
  --with-tcsetpgrp
  $*
)
if ! CFLAGS=-O $srcdir/configure $configure_options >& conf.out; then
  err=$?
  print -u2 "$progname: configure failed:"
  tail -n 15 conf.out
  exit $err
fi

# Build.
print -n "Building zsh ... "
if ! make >& mk.out; then
  err=$?
  print -u2 "done.
$progname: make failed:"
  tail -n 15 mk.out
  exit $err
fi
print "done."

# Run tests.
print -n "Running tests ... "
make -k check >& check.out
print "done."
summarize_zsh_tests check.out
print "Installing package to $USRLOCAL/$zsh_version."
if ! make install install.info >& inst.out; then
  err=$?
  print -u2 "$progname: make install failed:"
  tail -n 15 inst.out
  exit $err
fi

new_default -v zsh

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
