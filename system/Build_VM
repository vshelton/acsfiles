#!/bin/bash

# Customize a VM, whether it is debian-based or Fedora-based.

# External variables that might be overridden in the environment:
# htag, hosthome, ZIPROOT, USRLOCAL, SCMROOT and variable_source.
# The default environment variables work from a Windows host.
# In order to install from my linux host at home:
# hosthome=/media/sf_host-home/acs variable_source=/media/sf_host-home/acs/scmroot/hgroot/acsfiles/system ZIPROOT=/media/sf_host-SSD-2TB/opt/zip Build_VM

# Define helper functions to identify the type of the underlying OS.
function debian-p() {
  [[ -x /usr/bin/apt-get ]]
}
function fedora-p() {
  [[ -x /usr/bin/dnf ]]
}
function os-type() {
  if debian-p; then
    echo "debian"
  elif fedora-p; then
    echo "Fedora"
  else
    echo "Not a supported OS type." >/dev/tty
    return 1
  fi
  return 0
}
function package_manager() {
  if debian-p; then
    echo "apt-get --yes"
  elif fedora-p; then
    echo "dnf --assumeyes"
  else
    echo "Not a supported OS type." >/dev/tty
    return 1
  fi
  return 0
}

# Define a platform-agnostic function to install packages.
function install_package() {
  # Package_manager has already reported this error.
  pm=$(package_manager) || exit $?
  sudo ${pm} install $*
}

# Define a platform-agnostic function to upgrade packages.
function upgrade_packages() {
  # Package_manager has already reported this error.
  pm=$(package_manager) || exit $?
  if fedora-p; then
    sudo $pm upgrade
  elif debian-p; then
    sudo $pm update && sudo $pm upgrade
  fi
}

# If sudo isn't installed (as on debian), first
# use su to ensure that sudo is installed
# and that we are authorized to use it.
if [[ ! -x /usr/bin/sudo ]]; then
  su -c "apt-get install sudo;
         usermod --append --groups sudo acs;
         sync;
         reboot" root
fi

# First time through: install VirtualBox Guest additions,
# upgrade packages and reboot.
if ! groups acs | grep vboxsf >/dev/null; then
  if ! sudo mount /dev/cdrom /mnt ; then
    echo "Insert the Guest Additions CD image and press Enter" >/dev/tty
    read junk
    if ! sudo mount /dev/cdrom /mnt ; then
      echo "Could not mount the Guest Additions CD" >/dev/tty
      exit 1
    fi
  fi

  if [[ ! -x /mnt/VBoxLinuxAdditions.run ]]; then
    echo "Cannot find /mnt/VBoxLinuxAdditions.run.  Exiting." >/dev/tty
    exit 2
  fi

  install_package gcc make
  install_package linux-headers-amd64 || install_package kernel-headers
  sudo /mnt/VBoxLinuxAdditions.run
  sudo usermod --append --groups vboxsf acs

  # Do the package upgrade here, after installing
  # the VirtualBox Guest Additions.
  upgrade_packages

  sync
  if ! sudo reboot ; then
    echo "Could not reboot. Exiting." >/dev/tty
    exit 2
  fi
fi

# I use 'host-root' as the name of the VirtualBox root share.
: ${htag:=host-root}

# Set some key variables based on whether we are running at work
# under a Windows host, or at home running under a linux host.
: ${hosthome:=/media/sf_${htag}/cygwin64/home/shelta}
[[ ! -d ${hosthome} ]] && hosthome=/media/sf_host-home/acs
if [[ -d ${hosthome} ]]; then
  echo "Directory ${hosthome} does not exist.  Set the hosthome environment variable.  Exiting." >/dev/tty
  exit 3
fi
: ${ZIPROOT:=${hosthome}/software/zip}
[[ ! -d ${ZIPROOT} ]] && ZIPROOT=/media/sf_host-SSD-2TB/opt/zip
if [[ -d ${ZIPROOT} ]]; then
  echo "Directory ${ZIPROOT} does not exist.  Set the ZIPROOT environment variable.  Exiting." >/dev/tty
  exit 3
fi

: ${USRLOCAL:=/opt}
: ${SCMROOT:=${HOME}/scmroot}
: ${variable_source:=${SCMROOT}/acsfiles/system}
export SCMROOT USRLOCAL ZIPROOT
         
# Configure my home directory.
mkdir -p ${SCMROOT}/hgroot
tar cf - -C ${hosthome}/scmroot/hgroot acsfiles | tar xf - -C ${SCMROOT}/hgroot
ln -s hgroot/acsfiles hgroot/acsfiles/binfiles hgroot/acsfiles/rcfiles ${SCMROOT}
(
  cd
  ${SCMROOT}/binfiles/LinkStartupFiles
  mkdir .hist
  tar xf ${ZIPROOT}/wp.tar
  cat >bin/xfce-autostart <<EOF
#!/bin/bash

# Script to start up an XFCE session.

: \${USRLOCAL:=/opt}
PATH=\$HOME/bin:\$USRLOCAL/bin:\$PATH

xfce4-terminal --geometry 90x54+1-1 &
emacs &

conky --pause=5 &

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
EOF
  chmod 755 bin/xfce-autostart
)

# Make the USRLOCAL hierarchy.
sudo chown acs ${USRLOCAL}
mkdir ${USRLOCAL}/{bin,build,include,lib,share,src}

# Set up the execution path.
PATH=${HOME}/bin:${USRLOCAL}/bin:$PATH

# Install zshell, source control systems and the i3 window manager.
install_package zsh
if [[ -d /etc/zsh ]]; then
  sudo mv /etc/zsh /etc/ZSH-dist
else
  sudo mkdir /etc/ZSH-dist
  sudo mv /etc/z* /etc/ZSH-dist
fi
install_package git i3 mercurial

# The error has already been reported if we're not running
# on debian or Fedora, so the exit call is appropriate.
variable_source=${variable_source}/$(os-type) || exit $?

. ${variable_source}/Microsoft_fonts

# Unpack ubuntu fonts and update the font cache.
sudo -s <<EOF
  cd /usr/share/fonts
  [[ -d truetype ]] && cd truetype
  unzip ${ZIPROOT}/ubuntu-font-family-0.83.zip
  fc-cache -f -v
EOF

# Define a function to clone a git repo.
function clone_git_repo() {
  # $1 - name of git repo (i.e. emacs)
  # $2 - URL of repo
  local nickname=$1
  local repo_url=$2

  mkdir -p ${SCMROOT}/gitroot
  (
    cd ${SCMROOT}/gitroot

    git clone ${repo_url} ${nickname}
    touch --date=2016-01-01 ${nickname}/last_update
    cd ..
    ln -s gitroot/${nickname}
  )
}

# Define a function to link the most recent version
# of an application into the ${USRLOCAL} hierarchy.
function link_latest() {
  # $1 - destination name, i.e. "emacs"
  # $2 - source name, i.e. "emacs-2016-01-02"
  local nickname=$1
  local fullname=$2
  (
    cd ${USRLOCAL}
    ln -s ${fullname} ${nickname}
    cd bin
    ln -s ../${nickname}/bin/* .
  )
}

typeset -A repos
repos["conky"]="https://github.com/brndnmtthws/conky.git"
repos["emacs"]="git://git.savannah.gnu.org/emacs.git"
repos["zsh"]="git://git.code.sf.net/p/zsh/code"

. ${variable_source}/packages_required

# Build and install conky because my conky configuration
# crashes the default conky.
pname=conky
clone_git_repo ${pname} ${repos[$pname]}
install_package ${deps[$pname]}
mk-${pname}

# Build and install zsh.
pname=zsh
clone_git_repo ${pname} ${repos[$pname]}
install_package ${deps[$pname]}
CFLAGS=-O update-${pname}
link_latest ${pname} ${pname}-$(today)
[[ -x ${USRLOCAL}/bin/${pname} ]] && sudo usermod --shell ${USRLOCAL}/bin/${pname} acs

# Build and install emacs.
pname=emacs
clone_git_repo ${pname} ${repos[$pname]}
install_package ${deps[$pname]}
mk-${pname}
link_latest ${pname} ${pname}-$(today)

echo "
*************************************
Remember to:
  1. Turn off the screensaver.
  2. Modify session start-up.
  3. Tune up the xfce window manager.
*************************************
"

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
