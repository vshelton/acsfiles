#!/bin/bash

# Build a new linux system, either a native one
# or one hosted under VirtualBox.

function today() {
  date +'%Y-%m-%d'
}

# Print the arguments separated by commas and, ultimately, "and".
function print_list() {
  while (( $# > 0 ))
  do
    echo -n "\"$1\""
    shift
    if [[ $# -gt 1 ]]; then
      echo -n ", "
    elif [[ $# -eq 1 ]]; then
      echo -n " and "
    fi
  done
}

# Define a function to link the most recent version
# of an application into the ${USRLOCAL} hierarchy.
function link_latest() {
  # $1 - destination name, i.e. "emacs"
  # $2 - source name, i.e. "emacs-2016-01-02"
  local nickname=$1
  local fullname=$2
  (
    cd ${USRLOCAL}
    ln -s ${fullname} ${nickname}
    cd bin
    ln -s ../${nickname}/bin/* .
  )
}

# Echo the name of the home directory on the host.
function find_host_home() {
  directory_list=( ${vbox_prefix}${shared_home}/${username}
                   ${vbox_prefix}${shared_home}/${host_user}
                   ${vbox_prefix}${shared_root}/cygwin64/home/${username}
                   ${vbox_prefix}${shared_root}/cygwin64/home/${host_user} )
  for d in ${directory_list[@]}; do
    [[ -d ${d} ]] && echo $d && return 0
  done
  return 1
}

# Echo the name of the zip directory on the host.
function find_host_ziproot {
  directory_list=( ${vbox_prefix}${shared_opt}/zip
                   $(find_host_home)/software/zip )
  [[ -n ${ziproot} ]] &&
    directory_list=( ${ziproot}
                     ${directory_list[@]} )
  for d in ${directory_list[@]}; do
    [[ -d $d ]] && echo $d && break
  done
  if [[ ! -d $d ]]; then
    (
      echo -n "Zip directory not found on host: "
      print_list "${directory_list[@]}"
      echo " were tried.
Set the \"ziproot\" environment variable to a directory on the host. Exiting."
    ) >&2
    exit 1
  fi
 
}

#
# Code starts here.
#

: ${username:=$(whoami)}

# Make sure the directory contining this script is in PATH.
PATH=$(cd $(dirname $0); pwd):$PATH

# Define VirtualBox tag names for shared folders.
vbox_prefix="/media/sf_"
: ${shared_root:=host-root}
: ${shared_home:=host-home}
: ${shared_opt:=host-opt}
: ${host_user:=shelta}

# This build script depends on sudo, so install sudo
# (and reboot to make sure the group permissions get
# propagated) if sudo isn't already installed.
if [[ ! -x /usr/bin/sudo ]]; then
  su -c "apt-get install sudo;
         usermod --append --groups sudo ${username};
         sync;
         reboot" root
fi

# Install the system upgrades.
update-packages

[[ -x /usr/sbin/dmidecode ]] || install-packages dmidecode
host=$(sudo dmidecode -s system-product-name)

# Install the VirtualBox Guest Additions.
if [[ ${host} == "VirtualBox" ]]; then

  # First time through: install VirtualBox Guest Additions and reboot.
  if ! groups ${username} | grep vboxsf >/dev/null; then

    # Install VirtualBox Guest Additions.
    if ! sudo mount /dev/cdrom /mnt ; then
      echo "Insert the Guest Additions CD image and press Enter" 2>&1
      read junk
      if ! sudo mount /dev/cdrom /mnt ; then
        echo "Could not mount the Guest Additions CD.  Exiting." 2>&1
        exit 1
      fi
    fi

    if [[ ! -x /mnt/VBoxLinuxAdditions.run ]]; then
      echo "Cannot find /mnt/VBoxLinuxAdditions.run.  Exiting." 2>&1
      exit 2
    fi

    # Install the VirtualBox additions and the prerequisites.
    install-packages gcc make
    install-packages linux-headers-amd64 || install-packages kernel-devel kernel-headers
    sudo /mnt/VBoxLinuxAdditions.run &&
      sudo usermod --append --groups vboxsf ${username}

    sync
    if ! sudo reboot ; then
      echo "Could not reboot. Exiting." 2>&1
      exit 2
    fi
  fi
fi

# Find the directory containing zip files.
host_home=
ziproot=${ZIPROOT}
if [[ ${host} == "VirtualBox" ]]; then
  ziproot=$(find_host_ziproot)
  host_home=$(find_host_home)
fi

# Add the 'extra' repository if we're running under Arch linux.
#if arch-pm >/dev/null ; then
#  sudo -s << EOF
#  echo "
#
#[custom]
#Server = file://${ziproot}/arch" >>/etc/pacman.conf
#  sudo pacman --sync --refresh
#EOF
#fi

# Install the Z-shell and move aside the customization.
install-packages zsh
if [[ -d /etc/zsh ]]; then
  sudo mv /etc/zsh /etc/ZSH-dist
else
  sudo mkdir /etc/ZSH-dist
  if [[ -d /etc/zypp ]]; then
    sudo mv /etc/zprofile /etc/zsh_completion.d /etc/zshrc /etc/zsh_command_not_found /etc/zshenv /etc/ZSH-dist
  else
    sudo mv /etc/z* /etc/ZSH-dist
  fi
fi

# Install i3, git and mercurial.
install-packages git mercurial
install-packages i3

# Create USRLOCAL hierarchy
: ${USRLOCAL:=/opt}
: ${SRCROOT:=$USRLOCAL/src}
sudo chown ${username} ${USRLOCAL}
mkdir ${USRLOCAL}/{bin,build,include,lib,share,src}
ln -s ${ziproot} ${USRLOCAL}/zip

# These are the path names for my source code repository.
scmbase="scmroot"
hgroot="${scmbase}/hgroot"
acs_repo="${hgroot}/acsfiles"

# Clone my source repo from bitbucket.
cat >.hgrc <<EOF
# example user config (see "hg help config" for more info)
[ui]
username = Vin Shelton <ethersoft@gmail.com>

[auth]
bb.prefix = https://bitbucket.org
bb.username = acs
bb.password = Ether5802 Bullard

[pager]
ignore = version, help, update, diff

[extensions]
# uncomment these lines to enable some popular extensions
# (see "hg help extensions" for more info)
#
# color =
EOF
chmod 600 .hgrc
hg clone https://acs@bitbucket.org/acs/acs_script ${acs_repo}
ln -s ${acs_repo#${scmbase}/}{,/binfiles,/rcfiles} ${scmbase}

# Link startup files.
mv .emacs .emacs-dist
SCMROOT=${PWD}/${scmbase} ${acs_repo}/binfiles/LinkStartupFiles

# Create a directory for saving shell history, unpack wallpapers
# and create a startup-script for xfce.
if [[ -d ${host_home}/.hist ]]; then
  ln -s ${host_home}/.hist
else
  mkdir .hist
fi
tar xf ${ziproot}/wp.tar

cat >bin/daily <<EOF
#!/usr/bin/env zsh
# Daily update of system packages and home-built applications.
emulate -LR zsh

update-packages

setopt extended_glob
scm_update $(cd $SCMROOT; print *~binfiles~rcfiles(@))

common_options=( "--snapshot" "--install" )

mk-zsh $common_options
mk-emacs $common_options --with-x-toolkit=lucid

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
EOF
chmod 755 bin/daily

# Install Microsoft and Ubuntu fonts.
if suse-pm >/dev/null ; then
  install-packages fetchmsttfonts ubuntu-fonts
  fc-cache -f -v

elif arch-pm >/dev/null ; then
  mkdir -p $SRCROOT/microsoft-fonts
  (
    cd $SRCROOT/microsoft-fonts
    git clone https://aur.archlinux.org/ttf-ms-fonts.git
    (
      cd ./ttf-ms-fonts
      makepkg --syncdeps
      sudo pacman --upgrade --noconfirm ./ttf-ms-fonts-2.0-10-any.pkg.tar.xz
    )
    git clone https://aur.archlinux.org/ttf-tahoma.git
    (
      cd ./ttf-tahoma
      makepkg --syncdeps
      sudo pacman --upgrade --noconfirm ./ttf-tahoma-2.13-2-any.pkg.tar.xz
    )
    # PowerPointViewer.exe has been moved!
    git clone https://aur.archlinux.org/ttf-vista-fonts.git
    (
      cd ./ttf-vista-fonts
      perl -pi.bak -e 's@http://download.microsoft.com/download/E/6/7/E675FFFC-2A6D-4AB0-B3EB-27C9F8C8F696/PowerPointViewer.exe@https://archive.org/download/PowerPointViewer_201801/PowerPointViewer.exe@' PKGBUILD
      makepkg --syncdeps
      sudo pacman --upgrade --noconfirm ./ttf-vista-fonts-1-8-any.pkg.tar.xz
    )
    sudo pacman -Sy ttf-anonymous-pro ttf-dejavu ttf-hack ttf-inconsolata ttf-roboto noto-fonts
  )

elif debian-pm >/dev/null ; then
  # A little too much inside baseball here:
  # knowledge of apt-cache and dpkg.
  # Still, use install-packages for hygiene's sake.
  if [[ -n $(apt-cache search ttf-mscorefonts-installer) ]]; then
    install-packages ttf-mscorefonts-installer
  else
    install-packages cabextract libmspack0
    wget http://ftp.us.debian.org/debian/pool/contrib/m/msttcorefonts/ttf-mscorefonts-installer_3.6_all.deb
    sudo dpkg --install ttf-mscorefonts-installer_3.6_all.deb
  fi

elif fedora-pm >/dev/null ; then
  # Like in debian, too much knowledge of RPM packaging is required here.
  install-packages cabextract ttmkfdir rpm-build
  font_ver="msttcorefonts-2.5-1"
  specfile="${font_ver}.spec"
  wget http://corefonts.sourceforge.net/${specfile}
  # The list of mirrors is old; update it.
  perl -pi.orig -e 's/mirrors=".*"/mirrors="freefr"/;' -e 's/^mirror_count=.*/mirror_count=1/;' ${specfile}
  echo '%_topdir %(echo $HOME)/rpmbuild' > .rpmmacros
  for i in {1..10}; do
    rpmbuild -bb ${specfile} && break
  done
  sudo rpm -ihv rpmbuild/RPMS/noarch/${font_ver}.noarch.rpm

else
  echo "Not a supported OS type." 2>&1
  exit 2
fi

# Unpack ubuntu fonts and update the font cache.
if debian-pm >/dev/null || fedora-pm >/dev/null ; then
  sudo -s <<EOF
    cd /usr/share/fonts
    [[ -d truetype ]] && cd truetype
    unzip ${ziproot}/ubuntu-font-family-0.83.zip
    fc-cache -f -v
EOF
fi

# Install the terminal emulators and their configurations.
InstallTerminalEmulators

# Set up the execution path to include my scripts
# to make emacs and zsh.
PATH=${HOME}/bin:${PATH}

# Build emacs and zsh.
if arch-pm >/dev/null ; then
  (
    mkdir -p $SRCROOT/yodl-$(today)
    cd $SRCROOT/yodl-$(today)
    git clone https://aur.archlinux.org/icmake.git
    (
      cd ./icmake
      makepkg
      sudo pacman --upgrade --noconfirm $(ls ./icmake*pkg.tar.xz)
    )
    git clone https://aur.archlinux.org/yodl.git
    cd ./yodl
    makepkg
    sudo pacman --upgrade --noconfirm $(ls ./yodl*pkg.tar.xz)
  ) 
fi
init-software zsh && link_latest zsh zsh-$(today)

init-software emacs && link_latest emacs emacs-$(today)

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
