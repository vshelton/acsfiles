#!/bin/bash

# Build a new linux system, either a native one
# or one hosted under VirtualBox.

# Define helper functions to identify the type of the underlying OS.
function debian-p() {
  [[ -x /usr/bin/apt-get ]]
}
function fedora-p() {
  [[ -x /usr/bin/dnf ]]
}
function package_manager() {
  if debian-p; then
    echo "apt-get --yes"
  elif fedora-p; then
    echo "dnf --assumeyes"
  else
    echo "Not a supported OS type." 2>&1
    return 1
  fi
  return 0
}

# Define a platform-agnostic function to install packages.
function install_package() {
  # Package_manager has already reported this error.
  pm=$(package_manager) || exit $?
  sudo ${pm} install $*
}

# Define a platform-agnostic function to upgrade packages.
function upgrade_packages() {
  # Package_manager has already reported this error.
  pm=$(package_manager) || exit $?
  if fedora-p; then
    sudo ${pm} upgrade
  elif debian-p; then
    sudo ${pm} update && sudo ${pm} upgrade
  fi
}

# Print the arguments separated by commas and, ultimately, "and".
function print_list() {
  while (( $# > 0 ))
  do
    echo -n "\"$1\""
    shift
    if [[ $# -gt 1 ]]; then
      echo -n ", "
    elif [[ $# -eq 1 ]]; then
      echo -n " and "
    fi
  done
}

# Define a function to link the most recent version
# of an application into the ${USRLOCAL} hierarchy.
function link_latest() {
  # $1 - destination name, i.e. "emacs"
  # $2 - source name, i.e. "emacs-2016-01-02"
  local nickname=$1
  local fullname=$2
  (
    cd ${USRLOCAL}
    ln -s ${fullname} ${nickname}
    cd bin
    ln -s ../${nickname}/bin/* .
  )
}

# Echo the name of the home directory on the host.
function find_host_home() {
  directory_list=( ${vbox_prefix}${shared_home}/${username}
                   ${vbox_prefix}${shared_home}/${host_user}
                   ${vbox_prefix}${shared_root}/cygwin64/home/${username}
                   ${vbox_prefix}${shared_root}/cygwin64/home/${host_user} )
  for d in ${directory_list[@]}; do
    [[ -d ${d} ]] && echo $d && return 0
  done
  return 1
}

# Echo the name of the zip directory on the host.
function find_host_ziproot {
  directory_list=( ${vbox_prefix}${shared_opt}/zip
                   $(find_host_home)/software/zip )
  [[ -n ${ziproot} ]] &&
    directory_list=( ${ziproot}
                     ${directory_list[@]} )
  for d in ${directory_list[@]}; do
    [[ -d $d ]] && echo $d && break
  done
  if [[ ! -d $d ]]; then
    (
      echo -n "Zip directory not found on host: "
      print_list "${directory_list[@]}"
      echo " were tried.
Set the \"ziproot\" environment variable to a directory on the host. Exiting."
    ) 2>&1
    exit 1
  fi
 
}

#
# Code starts here.
#

username=$(whoami)

# Define VirtualBox tag names for shared folders.
vbox_prefix="/media/sf_"
: ${shared_root:=host-root}
: ${shared_home:=host-home}
: ${shared_opt:=host-SSD-2TB/opt}
: ${host_user:=shelta}

# This build script depends on sudo, so install sudo
# (and reboot to make sure the group permissions get
# propagated) if sudo isn't already installed.
if [[ ! -x /usr/bin/sudo ]]; then
  su -c "apt-get install sudo;
         usermod --append --groups sudo ${username};
         sync;
         reboot" root
fi

# Install the system upgrades.
upgrade_packages

[[ -x /usr/sbin/dmidecode ]] || install_package dmidecode
host=$(sudo dmidecode -s system-product-name)

# Install the VirtualBox Guest Additions.
if [[ ${host} == "VirtualBox" ]]; then

  # First time through: install VirtualBox Guest Additions and reboot.
  if ! groups acs | grep vboxsf >/dev/null; then

    # Install VirtualBox Guest Additions.
    if ! sudo mount /dev/cdrom /mnt ; then
      echo "Insert the Guest Additions CD image and press Enter" 2>&1
      read junk
      if ! sudo mount /dev/cdrom /mnt ; then
        echo "Could not mount the Guest Additions CD.  Exiting." 2>&1
        exit 1
      fi
    fi

    if [[ ! -x /mnt/VBoxLinuxAdditions.run ]]; then
      echo "Cannot find /mnt/VBoxLinuxAdditions.run.  Exiting." 2>&1
      exit 2
    fi

    # Install the VirtualBox additions and the prerequisites.
    install_package gcc make
    install_package linux-headers-amd64 || install_package kernel-devel kernel-headers
    sudo /mnt/VBoxLinuxAdditions.run &&
      sudo usermod --append --groups vboxsf acs

    sync
    if ! sudo reboot ; then
      echo "Could not reboot. Exiting." 2>&1
      exit 2
    fi
  fi
fi

# Install the Z-shell and move aside the customization.
install_package zsh
if [[ -d /etc/zsh ]]; then
  sudo mv /etc/zsh /etc/ZSH-dist
else
  sudo mkdir /etc/ZSH-dist
  sudo mv /etc/z* /etc/ZSH-dist
fi

# Install i3, git and mercurial.
install_package git i3 mercurial

# Create USRLOCAL hierarchy
: ${USRLOCAL:=/opt}
sudo chown ${username} ${USRLOCAL}
mkdir ${USRLOCAL}/{bin,build,include,lib,share,src}

# These are the path names for my source code repository.
scmbase="scmroot"
hgroot="${scmbase}/hgroot"
acs_repo="${hgroot}/acsfiles"

# Clone my source repo from bitbucket.
cat >.hgrc <<EOF
# example user config (see "hg help config" for more info)
[ui]
username = Vin Shelton <ethersoft@gmail.com>

[auth]
bb.prefix = https://bitbucket.org
bb.username = acs
bb.password = Ether5802 Bullard

[extensions]
# uncomment these lines to enable some popular extensions
# (see "hg help extensions" for more info)
#
# pager =
# color =
EOF
chmod 600 .hgrc
hg clone https://acs@bitbucket.org/acs/acs_script ${acs_repo}
ln -s ${acs_repo#${scmbase}/}{,/binfiles,/rcfiles} ${scmbase}

# Link startup files.
SCMROOT=${PWD}/${scmbase} ${acs_repo}/binfiles/LinkStartupFiles

# Find the directory containing zip files.
host_home=
ziproot=${ZIPROOT}
if [[ ${host} == "VirtualBox" ]]; then
  ziproot=$(find_host_ziproot)
  host_home=$(find_host_home)
fi

# Create a directory for saving shell history, unpack wallpapers
# and create a startup-script for xfce.
if [[ -d ${host_home}/.hist ]]; then
  ln -s ${host_home}/.hist
else
  mkdir .hist
fi
tar xf ${ziproot}/wp.tar
cat >bin/xfce-autostart <<EOF
#!/bin/bash

# Script to start up an XFCE session.

: \${USRLOCAL:=/opt}
PATH=\$HOME/bin:\$USRLOCAL/bin:\$PATH

xfce4-terminal --geometry 90x54+1-1 &
emacs &

#google-chrome-beta &
#clementine &

conky --pause=8 &

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
EOF
chmod 755 bin/xfce-autostart

cat >bin/daily <<EOF
#!/usr/bin/env zsh
# Daily update of system packages and home-built applications.
emulate -LR zsh

if [[ -x /usr/bin/apt-get ]]; then
  for a in update dist-upgrade autoremove autoclean; do
    sudo apt-get --yes \$a || break
  done

elif [[ -x /usr/bin/dnf ]]; then
  sudo dnf --assumeyes update &&
    sudo dnf --assumeyes autoremove &&
      sudo dnf --assumeyes clean all
fi

scm_update acsfiles conky

mk-zsh
mk-emacs --with-x-toolkit=lucid

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
EOF
chmod 755 bin/daily

# Install Microsoft and Ubuntu fonts.
if debian-p ; then
  if [[ -n $(apt-cache search ttf-mscorefonts-installer) ]]; then
    sudo apt-get --yes install ttf-mscorefonts-installer
  else
    sudo apt-get --yes install cabextract libmspack0
    wget http://ftp.us.debian.org/debian/pool/contrib/m/msttcorefonts/ttf-mscorefonts-installer_3.6_all.deb
    sudo dpkg --install ttf-mscorefonts-installer_3.6_all.deb
  fi

elif fedora-p ; then
  sudo dnf --assumeyes install cabextract ttmkfdir rpm-build
  font_ver="msttcorefonts-2.5-1"
  specfile="${font_ver}.spec"
  wget http://corefonts.sourceforge.net/${specfile}
  # The list of mirrors is old; update it.
  perl -pi.orig -e 's/mirrors=".*"/mirrors="freefr"/;' -e 's/^mirror_count=.*/mirror_count=1/;' ${specfile}
  echo '%_topdir %(echo $HOME)/rpmbuild' > .rpmmacros
  for i in {1..10}; do
    rpmbuild -bb ${specfile} && break
  done
  sudo rpm -ihv rpmbuild/RPMS/noarch/${font_ver}.noarch.rpm

else
  echo "Not a supported OS type." 2>&1
  exit 2
fi

# Unpack ubuntu fonts and update the font cache.
sudo -s <<EOF
  cd /usr/share/fonts
  [[ -d truetype ]] && cd truetype
  unzip ${ziproot}/ubuntu-font-family-0.83.zip
  fc-cache -f -v
EOF

# Set up the execution path to include my scripts
# to make conky, emacs and zsh.
PATH=${HOME}/bin:${PATH}

# Build conky, emacs and zsh.
init-conky              # Installs directly to USRLOCAL, so calling
                        # link_latest() is not necessary.

init-zsh
link_latest zsh zsh-$(today)
if [[ -x ${USRLOCAL}/bin/zsh ]]; then
  sudo -s <<EOF
    echo "${USRLOCAL}/bin/zsh" >>/etc/shells
    usermod --shell ${USRLOCAL}/bin/zsh ${username}
EOF
fi

init-emacs
link_latest emacs emacs-$(today)

# Local Variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
